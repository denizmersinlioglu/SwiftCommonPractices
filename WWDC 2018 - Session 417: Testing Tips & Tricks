WWDC 2018 - Session 417: Testing Tips & Tricks

- Testing network requests
- Working with notifications
- Mocking with protocols
- Test execution speed

Testing network requests

    Structure a test suite, balancing thoroughness, understandability and execution speed.
    Pyramid: 
        - (Base - Large Size) Unit Test: 
            - Exercising individual classes and methods in your app.
            - Easy to read.
            - Clear failure messages. 
            - Execute quicly. 100 - 200 tests per minute.
        - (Medium Size) Integration Test:
            - Cluster of objects working properly together.
            - A few seconds to run.
        - (Low size) End-to-End Test:
            - UI tests that exercise the way how the end user will do.
            - Compability with underlying OS.
            - Compability with outside resources used by the app.

    App Structure:
        Prepare URLRequest -> Create URLSession Task -> Parse Response -> Update View
                                (Talk w Server)

    The "func loadData" is not testable. We need to create a structure that allows us to test easly.
        func loadData(near coord: CLLocationCoordinate2D){
            let url = URL(string: "/locations?lat=\(coord.latitude)&long=\(coord.longitude)")!
            URLSession.shared.dataTask(with url) {data, response, error in
                guard let data = data else {self.handleError(error); return }
                do {
                    let values = try JSONDecoder().decode([PointOfInterest].self, from: data)

                    DispatchQueue.main.async{
                        self.tableValues = values
                        self.tableView.reloadData()
                    }
                } catch {
                    self.handleError(error)
                }
            }.resume()
        }

    (Base - Large Size) Unit Test
        Make all processes with pure functions that have no side effects.
            - Create encapsulated objects that handles each task seperately.
            - PointsOfInterestRequest: Create a URLRequest instance + parseResponse 
            - Write unit tests for the individual processes seperately in PointOfInterestRequestTest ( instance)
            - Test Prepare URLRequest & Parse Response Parts of the app will be well tested.

        struct PointsOfInterestRequest{
            func makeRequest(from coordinate: CLLocationCoordinate2D) throws -> URLRequest{
                guard CLLocationCoordinate2DIsValid(coordinate) else {
                    throw RequestError.invalidCoordinate
                }

                var components = URLComponents(string: "https://example.com/locations")!
                components.queryItems = [
                    URLQueryItem(name: "lat", value: "\(coordinate.latitude)"),
                    URLQueryItem(name: "long", value: "\(coordinate.longitude)")
                ]
                return URLRequest(url: components.url!)
            }

            func parseResponse(data: Data) throws -> [PointOfInterest] {
                return try JSONDecoder().decode([PointOfInterest].self, from: data)
            }
        }

        class PointOfInterestRequestTest: {
            let request = PointsOfInterestRequest()

            func testMakingURLRequest() throws {
                let coordinate = CLLocationCoordinate2D(latitude: 37, longitude: -121)

                let urlRequest = try request.makeRequest(from: coordinate)
                XCTAssertEqual(urlRequest.url?.scheme, "https")
                XCTAssertEqual(urlRequest.url?.host, "example.com")
                XCTAssertEqual(urlRequest.url?.query, "lat=37&long=-121")
            }

            -> XCTTest, you can use throws on the test functions without using propert do catch blocks.
            func testParsingResponse() throws { 
                let jsonData = "...."
                let response = try request.parseResponse(data: jsonData)
                XCTAssertEqual(response, [PointOfInterest(name: "....")])
            }
        }

    (Medium Size) Mid Level Integration Test
        We can also write unit tests for APIRequestLoader. However lets move up to integration tests.
            - Prepare URLRequest & Create URLSession Task & Parse Response -> Integration
            - We want to check whether out interaction with URLSession API is correct.
            - Foundation URL loading system provides a great hook to test interaction with URLSession API.

        How to Use URLProtocol
        - URLSessionConfiguration -> URLSession -> URLSessionDataTask -> URLProtocol subclasses (Built-in Protocols(HTTPS))
        - We will provide "MOCK PROTOCOLS" that lets us -> URLSessionConfiguration
            - Make assertions about requests that are coming out
            - Provide mock responses

        Mock Protocol ---------> URLProtocolClient ---------> URLSessionDataTask        -> Loop under URLSessionDataTask
        Built-in Protocols ---------> URLProtocolClient ---------> URLSessionDataTask   -> Loop under URLSessionDataTask

        protocol APIRequest {
            associatedtype RequestDataType
            associatedtype ResponseDataType

            func makeRequest(from data: RequestDataType) throws -> URLRequest
            func parseResponse(data: Data) throws -> ResponseDataType
        }

        class APIRequestLoader<T: APIRequest>{
            let apiRequest: T
            let urlSession: URLSession

            init(apiRequest: T, urlSession: URLSession = .shared){
                self.apiRequest = apiRequest
                self.urlRequest = urlRequest
            }

            func loadAPIRequest(requestData: T.RequestDataType), completionHandler: @escaping (T.ResponseDataType?, Error?) -> Void) {
                do{
                    let urlRequest = try apiRequest.makeRequest(from: requestData)
                    urlSession.dataTask(with: urlRequest) { data, response, error in
                        guard let data = data else { return completionHandler(nil, error) }
                        do{
                            let parsedResponse = try self.apiRequest.parseResponse(data: data)
                            completionHandler(parsedResponse, nil)
                        }catch{
                            completionHandler(nil, error) 
                        }
                    }.resume()
                }catch{
                    completionHandler(nil, error)
                }
            }
        } 

        class MockURLProtocol: URLProtocol{
            static var requestHandler: ((URLRequest) throws -> (HTTPURLResponse, Data))?

            override class func canInit(with request: URLRequest) -> Bool{
                return true
            }

            override class func canonicalRequest(for request: URLRequest) -> URLRequest{
                return request
            }

            override func startLoading(){
                guard let handler = MockURLProtocol.requestHandler else {
                    XCTFail("Received unexpected request with no handler set")
                    return
                }
                do{
                    let (response, data) = try handler(request)
                    client?.urlProtocol(self, didReceive: response, cacheStoragePolicy: .notAllowed)
                    client?.urlProtocol(self, didLoad: data)
                    client?.urlProtocolDidFinishLoading(self)
                }catch{
                    client?.urlProtocol(self,didFailWithError: error)
                }
            }

            override func stopLoading(){
                // ...
            }
        }

        class APILoaderTests: {
            var loader: APIRequestLoader<PointsOfInterestRequest>!

            override setup() {
                let request = PointsOfInterestRequest()

                let configuration = URLSessionConfiguration.ephemeral
                configuration.protocolClasses = [MockURLProtocol.self]
                let urlSession = URLSession(configuration: configuration)

                loader = APIRequestLoader(apiRequest: request, urlSession: urlSession)
            }

            func testLoaderSuccess(){
                let inputCoordinate = CLLocationCoordinate2D(latitude: 27, longitude: -121)
                let mockJsonData = "...".data(using: .utf8)

                MockURLProtocol.requestHandler = { request in
                    XCTAssertEqual(request.url?.query?.contains("lat=37), true)
                    return (HTTPURLResponse, mockJsonData)
                }

                let expectation = XCTTestExpectation(description: "response")
                loader.loadAPIRequest(requestData: inputCoordinate) { pointOfInterest, error in 
                    XCTAssertEqual(pointOfInterest, [PointOfInterest(name: "...")])
                    expectation.fulfill()
                }
                wait(for: [expectation], timeout: 1)
            }
        }

    Low Size) End-To-End Test
        -> Creating Mock Servers can be very helpful when testing the application end-to-end. -> Control over the data.
        -> UI Testing can be used.
        -> Create Unit Test that directly calls the same Request to the server. You dont need to test all request by UI tests.

    Summary Testing Network Requests:
        - Decompose code for testability
        - URLProtocol as a mocking tool
        - Tiered (sirali) testing strategy: Pyramid Test Suite


Working With Notifications
    Talking about Foundation level notifications. -> NSNotifications in Obj-C
    We may need to test when an object receives a notification or an object posts a notification.
    Notifications are one to many communication mechanism. 
        -> We need to test notification in a isolated fashion to avoid unintended side effects.
        -> Isolation avoids unreliable or flaky tests.

   Testing notification observers:
        - Create separate NotificationCenter, instead of .default
        - Pass to init() and store in a new property
        - Replace all uses of NotificationCenter.default with new property
        -> These changes, limits scope of tests by avoiding external effects.

        -> The implementation below may lead some side effects.
            class PointOfInterestTableViewController{
                var observer: AnyObject?

                init(){
                    let name = CurrentLocationProvider.authChangedNotification
                    observer = NotificationCenter.default.addObserver(forName: name, object: nil, queue: .main){ [weak self] _ in
                        self?.handleAuthChanged()
                    }
                }

                var didHandleNotification = false
                func handleAuthChanged(){
                    didHandleNotification = true
                }
            }

            class PointOfInterestTableViewControllerTests: {

                func testNotification(){
                    let observer = PointOfInterestTableViewController()
                    XCTAssertFalse(observer.didHandleNotification)

                    let name = CurrentLocationProvider.authChangedNotification
                    NotificationCenter.default.post(name: name, object: nil)

                    XCTAssertTrue(observer.didHandleNotification)
                }
            }

        -> The implementation below solves the side effects.
            class PointOfInterestTableViewController{
                var observer: AnyObject?
                var notificationCenter: NotificationCenter

                //Only the unit tests will pass the parameter to inject dependency.
                init(notificationCenter: NotificationCenter = .default){
                    self.notificationCenter = notificationCenter
                    let name = CurrentLocationProvider.authChangedNotification
                    observer = notificationCenter.addObserver(forName: name, object: nil, queue: .main){ [weak self] _ in
                        self?.handleAuthChanged()
                    }
                }

                var didHandleNotification = false
                func handleAuthChanged(){
                    didHandleNotification = true
                }
            }

            class PointOfInterestTableViewControllerTests: {

                func testNotification(){
                    let notificationCenter = NotificationCenter()
                    let observer = PointOfInterestTableViewController(notificationCenter: notificationCenter)
                    XCTAssertFalse(observer.didHandleNotification)

                    let name = CurrentLocationProvider.authChangedNotification
                    notificationCenter.post(name: name, object: nil)

                    XCTAssertTrue(observer.didHandleNotification)
                }
            }



    Testing Notification Posters:
        - How to validate that a subject posts a Notification?
        - Use a separate NotificationCenter again
        - Use XCTNSNotificationExpectation

        -> The implementation below may lead some side effects.
            class CurrentLocationProvider{
                static let authChangedNotification = Notification.name("AuthChanged")
            
                func notifyAuthChanged(){
                    let name = CurrentLocationProvider.authChangedNotification
                    NotificationCenter.default.post(name: name, object: nil)
                }
            }

            class CurrentLocationProviderTests: {
                
                func testNotifyAuthChanged(){
                    let poster = CurrentLocationProvider()
                    var observer: AnyObject?
                    let expectation = XCTNSNotificationExpectation(name: name, object: poster)
                    poster.notifyAuthChanged()
                    wait(for: [expectation], timeout: 0)
                }
            }

        -> The implementation below solves the side effects. 
            class CurrentLocationProvider{
                static let authChangedNotification = Notification.name("AuthChanged")
                var notificationCenter: NotificationCenter

                //Only the unit tests will pass the parameter to inject dependency.
                init(notificationCenter: NotificationCenter = .default){
                    self.notificationCenter = notificationCenter
                }

                func notifyAuthChanged(){
                    let name = CurrentLocationProvider.authChangedNotification
                    NotificationCenter.default.post(name: name, object: nil)
                }
            }

            class CurrentLocationProviderTests: { 
                
                func testNotifyAuthChanged(){
                    let notificationCenter = NotificationCenter()

                    let poster = CurrentLocationProvider(notificationCenter: notificationCenter)
                    var observer: AnyObject?
                    let expectation = XCTNSNotificationExpectation(name: name, object: poster, notificationCenter: notificationCenter)
                    poster.notifyAuthChanged()
                    wait(for: [expectation], timeout: 0)
                }
            }


Mocking with Protocols 
    Classes often interact with other classes in app or SDK
    Many SDK classes cannot be created directly
    Delegate protocols make testing more challenging
    Solution: Mock interface of external class using protocol

    The implementation below can work because we cant reach the request location method.
        - The request location method is not part of our code.
        - User need to authorize the device or app to access location services.
        - We need to mock the API to test our implementation

        class CurrentLocationProvider: NSObject{
            let locationManager: CLLocationManager()

            override init(){
                super.init()
                self.locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters
                self.locationManager.delegate = self
            }

            var currentLocationCheckCallBack: ((CLLocation) -> Void)?
            func checkCurrentLocation(completion: @escaping (Bool) -> Void) {
                self.currentLocationCheckCallBack = { [unowned self] location in
                    completion(self.isPointOfInterest(location))
                }
                locationManager.requestLocation()
            }

            func isPointOfInterest(_ location: CLLocation) -> Bool {
                // Perform check ... 
            }
        }

        extension CurrentLocationProvider: CLLocationManagerDelegate {
            func locationManager(_ manager: CLLocationManager, didUpdateLocations locs: [CLLocation]) {
                guard let location = locs.first else { return }
                self.currentLocationCheckCallBack?(location)
                self.currentLocationCheckCallBack = nil
            }
        }

        class CurrentLocationProviderTests: XCTestCase{

            func testCheckCurrentLocation() {
                let provider = CurrentLocationProvider()

                XCTAssertNotEqual(provider.locationManager.desiredAccuracy, 0)
                XCTAssertNotNil(provider.locationManager.delegate)

                let completionExpectation = expectation(description: "completion")

                provider.checkCurrentLocation { isPointOfInterest in
                    XCTAssertTrue(isPointOfInterest)
                    completionExpectation.fulfill()
                }

                wait(for: [completionExpectation], timeout: 1)
            }
        }

    Solution 1: Mocking Using a Subclass => Dont use
        - Subclassing the external calls in test and overriding methods -> Can work but risky
        - Some SDK classes cannot be subclassed.
        - Easy to forget override methods.

    Solution 2: Mock Using Protocols
        protocol LocationFetcher{
            var delegate: CLLocationManagerDelegate? {get set}
            var desiredAccuracy: CLLocationAccuracy {get set}
            func requestLocation()
        }

        protocol LocationFetcherDelegate: class{
            func locationFetcher(_ fetcher: LocationFetcher, didUpdateLocations locs: [CLLocation])
        }

        extension CLLocationManager: LocationFetcher{
            var locationFetcherDelegate: LocationFetcherDelegate? {
                get { return delegate as! LocationFetcherDelegate? }
                set { delegate = newValue as! CLLocationManagerDelegate?}
            }
        }

        class CurrentLocationProvider: NSObject{
            let locationFetcher: LocationFetcher

            override init(locationFetcher: LocationFetcher = CLLocationManager()){
                self.locationFetcher = locationFetcher
                self.locationFetcher.locationFetcherDelegate = self
                super.init()
                self.locationFetcher.desiredAccuracy = kCLLocationAccuracyHundredMeters
                self.locationFetcher.delegate = self
            }

            var currentLocationCheckCallBack: ((CLLocation) -> Void)?
            func checkCurrentLocation(completion: @escaping (Bool) -> Void) {
                self.currentLocationCheckCallBack = { [unowned self] location in
                    completion(self.isPointOfInterest(location))
                }
                locationFetcher.requestLocation()
            }

            func isPointOfInterest(_ location: CLLocation) -> Bool {
                // Perform check ... 
            }
        }

        extension CurrentLocationProvider: LocationFetcherDelegate {
            func locationManager(_ manager: locationFetcher, didUpdateLocations locs: [CLLocation]) {
                guard let location = locs.first else { return }
                self.currentLocationCheckCallBack?(location)
                self.currentLocationCheckCallBack = nil
            }
        }

        extension CurrentLocationProvider: CLLocationManagerDelegate {
            func locationManager(_ manager: CLLocationManager, didUpdateLocations locs: [CLLocation]) {
                self.locationFetcher(manager, didUpdateLocations: locs)
            }
        }

        class CurrentLocationProviderTests: XCTestCase{

            struct MockLocationFetcher: LocationFetcher{
                weak var locationFetcherDelegate: LocationFetcherDelegate?

                var desiredAccuracy: CLLocationAccuracy = 0
                var handleRequestLocation: (() -> CLLocation)?

                func requestLocation() {
                    guard let location = handleRequestLocation?() else {return}
                    locationFetcherDelegate?.locationFetcher(self, didUpdateLocations: [location])
                }
            }

            func testCheckCurrentLocation() {
                let locationFetcher = MockLocationFetcher()
                let requestLocationExpectation = expectation(description: "request location")
                locationFetcher.handleRequestLocation = {
                    requestLocationExpectation.fulfill()
                    return CLLocation(latitude: 37, longitude: -121)
                }

                let provider = CurrentLocationProvider(locationFetcher: locationFetcher)
                let completionExpectation = expectation(description: "completion")
                provider.checkCurrentLocation { isPointOfInterest in
                    XCTAssertTrue(isPointOfInterest)
                    completionExpectation.fulfill()
                }

                wait(for: [requestLocationExpectation, completionExpectation], timeout: 1)
            }
        }

    Summary: Mocking with Protocols:
        - Define a protocol representing the external interface
        - Define extension on the external class conforming the protocol
        - Replace all usage of the external class with the protocol
        - Set the external reference via initializer or a property, using the protocol type

    Summary: Mocking Delegates with Protocols:
        - Define delegate protocol with interfaces your code implements
        - Replace subject type with mock protocol defined earlier.
        - In mock protocol, rename delegate property
        - In extension on original type, implement mock delegate property and convert.

Test Execution Speed
    - Slow tests hinder developer productivity.
    - Want test to run fast.
    - Artificial delay should not be necessary with sufficient mocking.

    The implementation below is slow downs the test process
        class FeaturedPlaceManager {
            
            var currentPlace: currentPlace

            func scheduleNextPlace() {
                Timer.scheduledTimer(withTimeInterval: 10, repeats: false) { [weak self] _ in
                    self?.showNextPlace()
                }
            }

            func showNextPlace(){

            }
        }

        class FeaturedPlaceManagerTests: XCTestCase{

            func testScheduleNextPlace() {
                let manager = FeaturedPlaceManager()

                let beforePlace = manager.currentPlace
                manager.scheduleNextPlace()
                RunLoop.current.run(until: Date(timeIntervalSinceNow: 11))

                XCTAssertNotEqual(manager.currentPlace, beforePlace)
            }
        }

    The implementation below is speed ups the test process
        class FeaturedPlaceManager {
            
            var currentPlace: currentPlace
            var interval: TimeInterval = 10

            func scheduleNextPlace() {
                Timer.scheduledTimer(withTimeInterval: interval, repeats: false) { [weak self] _ in
                    self?.showNextPlace()
                }
            }

            func showNextPlace(){

            }
        }

        class FeaturedPlaceManagerTests: XCTestCase{

            func testScheduleNextPlace() {
                let manager = FeaturedPlaceManager()
                manager.interval = 1
                let beforePlace = manager.currentPlace
                manager.scheduleNextPlace()
                RunLoop.current.run(until: Date(timeIntervalSinceNow: 2))

                XCTAssertNotEqual(manager.currentPlace, beforePlace)
            }
        }

    Testing Delayed Actions without the delay 
        - Identify the delay technique -> Timer, DispatchQueue.asyncAfter
        - Mock this mechanism during tests
        - Invoke delayed action immediately

        class FeaturedPlaceManager {
            
            var currentPlace: currentPlace
            var interval: TimeInterval = 10
            let timerScheduler: TimerScheduler

            init(timerScheduler: TimerScheduler){
                self.timerScheduler = timerScheduler
            }
            
            func scheduleNextPlace() {
                let timer = Timer(withTimeInterval: interval, repeats: false) { [weak self] _ in
                    self?.showNextPlace()
                }

                runLoop.add(timer, forMode: .default)
            }

            func showNextPlace(){

            }
        }

        protocol TimerScheduler {
            func add(_ timer: Timer, forMode mode: RunLoop.Mode)
        }

        extension RunLoop: TimerScheduler{}
